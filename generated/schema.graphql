### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Answer {
  authorId: ID!
  challengeId: ID!
  content: String!
  id: ID!
  isLiked: Boolean!
  likeCount: Int!
}

type Challenge {
  answers: [Answer!]!
  authorId: String!
  id: ID!
  labels: [Label!]!
  title: String!
}

type ChallengeConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [ChallengeEdge!]!

  """Flattened list of Challenge type"""
  nodes: [Challenge!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type ChallengeEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Challenge!
}

type Label {
  challenges: [Challenge!]!
  id: ID!
  name: String!
}

type Like {
  id: ID!
  userId: String!
}

type Mutation {
  createAnswer(challengeId: ID!, content: String!): Answer!
  createChallenge(labels: [String!], title: String!): Challenge!
  createLabel(challengeId: ID!, name: String!): Label!
  createLike(answerId: ID!): Like!
  deleteLike(answerId: ID!): Like!
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  answers(challengeId: ID!): [Answer]!
  challenge(id: ID!): Challenge
  challenges(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): ChallengeConnection!
  label(name: String!): Label
  labels(challengeId: ID!): [Label!]!
  likes(answerId: ID!): [Like]
  user(id: ID!): User
}

type User {
  iconUrl: String!
  id: ID!
  username: String!
}