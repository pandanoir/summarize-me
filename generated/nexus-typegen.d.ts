/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../graphql/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Answer: { // root type
    challengeId: number; // Int!
    content: string; // String!
    id: number; // Int!
  }
  Challenge: { // root type
    authorId: string; // String!
    id: number; // Int!
    title: string; // String!
  }
  Label: { // root type
    id: number; // Int!
    name: string; // String!
  }
  Like: { // root type
    id: number; // Int!
    userId: string; // String!
  }
  Mutation: {};
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Answer: { // field return type
    challengeId: number; // Int!
    content: string; // String!
    id: number; // Int!
    isLiked: boolean; // Boolean!
    likeCount: number; // Int!
  }
  Challenge: { // field return type
    answers: NexusGenRootTypes['Answer'][]; // [Answer!]!
    authorId: string; // String!
    id: number; // Int!
    labels: NexusGenRootTypes['Label'][]; // [Label!]!
    title: string; // String!
  }
  Label: { // field return type
    challenges: NexusGenRootTypes['Challenge'][]; // [Challenge!]!
    id: number; // Int!
    name: string; // String!
  }
  Like: { // field return type
    id: number; // Int!
    userId: string; // String!
  }
  Mutation: { // field return type
    createAnswer: NexusGenRootTypes['Answer']; // Answer!
    createChallenge: NexusGenRootTypes['Challenge']; // Challenge!
    createLabel: NexusGenRootTypes['Label']; // Label!
    createLike: NexusGenRootTypes['Like']; // Like!
    deleteLike: NexusGenRootTypes['Like']; // Like!
  }
  Query: { // field return type
    answers: Array<NexusGenRootTypes['Answer'] | null>; // [Answer]!
    challenge: NexusGenRootTypes['Challenge'] | null; // Challenge
    challenges: Array<NexusGenRootTypes['Challenge'] | null> | null; // [Challenge]
    label: NexusGenRootTypes['Label'] | null; // Label
    labels: NexusGenRootTypes['Label'][]; // [Label!]!
    likes: Array<NexusGenRootTypes['Like'] | null> | null; // [Like]
  }
}

export interface NexusGenFieldTypeNames {
  Answer: { // field return type name
    challengeId: 'Int'
    content: 'String'
    id: 'Int'
    isLiked: 'Boolean'
    likeCount: 'Int'
  }
  Challenge: { // field return type name
    answers: 'Answer'
    authorId: 'String'
    id: 'Int'
    labels: 'Label'
    title: 'String'
  }
  Label: { // field return type name
    challenges: 'Challenge'
    id: 'Int'
    name: 'String'
  }
  Like: { // field return type name
    id: 'Int'
    userId: 'String'
  }
  Mutation: { // field return type name
    createAnswer: 'Answer'
    createChallenge: 'Challenge'
    createLabel: 'Label'
    createLike: 'Like'
    deleteLike: 'Like'
  }
  Query: { // field return type name
    answers: 'Answer'
    challenge: 'Challenge'
    challenges: 'Challenge'
    label: 'Label'
    labels: 'Label'
    likes: 'Like'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createAnswer: { // args
      challengeId: number; // Int!
      content: string; // String!
    }
    createChallenge: { // args
      labels?: string[] | null; // [String!]
      title: string; // String!
    }
    createLabel: { // args
      challengeId: number; // Int!
      name: string; // String!
    }
    createLike: { // args
      answerId: number; // Int!
    }
    deleteLike: { // args
      answerId: number; // Int!
    }
  }
  Query: {
    answers: { // args
      challengeId: number; // Int!
    }
    challenge: { // args
      id: number; // Int!
    }
    label: { // args
      name: string; // String!
    }
    labels: { // args
      challengeId: number; // Int!
    }
    likes: { // args
      answerId: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}